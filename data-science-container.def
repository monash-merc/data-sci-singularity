Bootstrap: debootstrap
MirrorURL: http://us.archive.ubuntu.com/ubuntu/
OSVersion: xenial
Include: apt
%post
    apt install -y software-properties-common
    apt-add-repository -y universe

##########################
# Install CUDA and CUDNN #
##########################
export CUDA_VERSION=8.0.61
export CUDNN7_VERSION=7.0.1.13
export CUDNN6_VERSION=6.0.21
export CUDNN5_VERSION=5.1.10
export CUDA_PKG_VERSION="8-0=$CUDA_VERSION-1"
export NVIDIA_GPGKEY_SUM=d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5
export NVIDIA_GPGKEY_FPR=ae09fe4bbd223a84b2ccfce3f60f4b3d7fa2af80

apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub && \
apt-key adv --export --no-emit-version -a $NVIDIA_GPGKEY_FPR | tail -n +5 > cudasign.pub && \
echo "$NVIDIA_GPGKEY_SUM  cudasign.pub" | sha256sum -c --strict - && rm cudasign.pub && \
echo "deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64 /" > /etc/apt/sources.list.d/cuda.list
echo "deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list

apt update
apt install -y --no-install-recommends \
        cuda-nvrtc-$CUDA_PKG_VERSION \
        cuda-nvgraph-$CUDA_PKG_VERSION \
        cuda-cusolver-$CUDA_PKG_VERSION \
        cuda-cublas-8-0=8.0.61.1-1 \
        cuda-cufft-$CUDA_PKG_VERSION \
        cuda-curand-$CUDA_PKG_VERSION \
        cuda-cusparse-$CUDA_PKG_VERSION \
        cuda-npp-$CUDA_PKG_VERSION \
        cuda-cudart-$CUDA_PKG_VERSION \
        cuda-core-$CUDA_PKG_VERSION \
        cuda-misc-headers-$CUDA_PKG_VERSION \
        cuda-command-line-tools-$CUDA_PKG_VERSION \
        cuda-nvrtc-dev-$CUDA_PKG_VERSION \
        cuda-nvml-dev-$CUDA_PKG_VERSION \
        cuda-nvgraph-dev-$CUDA_PKG_VERSION \
        cuda-cusolver-dev-$CUDA_PKG_VERSION \
        cuda-cublas-dev-8-0=8.0.61.1-1 \
        cuda-cufft-dev-$CUDA_PKG_VERSION \
        cuda-curand-dev-$CUDA_PKG_VERSION \
        cuda-cusparse-dev-$CUDA_PKG_VERSION \
        cuda-npp-dev-$CUDA_PKG_VERSION \
        cuda-cudart-dev-$CUDA_PKG_VERSION \
        cuda-driver-dev-$CUDA_PKG_VERSION \
        libcudnn7=$CUDNN7_VERSION-1+cuda8.0 \
        libcudnn7-dev=$CUDNN7_VERSION-1+cuda8.0 \
        libcudnn6=$CUDNN6_VERSION-1+cuda8.0 \
        libcudnn6-dev=$CUDNN6_VERSION-1+cuda8.0 \
        libcudnn5=$CUDNN5_VERSION-1+cuda8.0 \
        libcudnn5-dev=$CUDNN5_VERSION-1+cuda8.0
ln -s cuda-8.0 /usr/local/cuda

echo "/usr/local/cuda/lib64" >> /etc/ld.so.conf.d/cuda.conf
echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf
echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf
ldconfig

export PATH="/usr/local/nvidia/bin:/usr/local/cuda/bin:$PATH"
export LD_LIBRARY_PATH="/usr/local/nvidia/lib:/usr/local/nvidia/lib64:$LD_LIBRARY_PATH"

###########################
# Install common packages #
###########################
apt install -y \
      python-pydot \
      python3-pydot \
      python3-dev \
      python-dev \
      python-pip \
      python3-pip \
      openmpi-bin \
      openmpi-doc

# Update pip
pip3 install -U pip
pip2 install -U pip
apt remove -y python-pip
apt remove -y python3-pip

pip2 install wheel
pip3 install wheel
pip3 install \
      jupyter \
      future \
      flask \
      graphviz \
      hypothesis \
      matplotlib \
      pydot \
      python-nvd3 \
      pyyaml \
      requests \
      scikit-learn \
      scikit-image \
      scipy \
      tornado \
      pandas \
      numpy

pip2 install \
      future \
      flask \
      graphviz \
      hypothesis \
      matplotlib \
      pydot \
      python-nvd3 \
      pyyaml \
      requests \
      scikit-learn \
      scikit-image \
      scipy \
      tornado \
      pandas \
      numpy

##########################
# Install Python2 Kernel #
##########################
pip2 install ipykernel
python2 -m ipykernel install

#############
# Install R #
#############
echo "deb http://cran.rstudio.com/bin/linux/ubuntu xenial/" > /etc/apt/sources.list.d/r.list
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9
apt update
apt install -y r-base r-base-dev libcurl4-openssl-dev libssl-dev

export TERM=xterm
cat << EOF | R --no-save
install.packages('devtools', repos="http://cran.r-project.org")
devtools::install_github('IRkernel/IRkernel')
# or devtools::install_local('IRkernel-master.tar.gz')
IRkernel::installspec(user=FALSE)  # to register the kernel in the current R installation
EOF

##################
# Install Caffe1 #
##################
apt-get install -y --no-install-recommends \
      caffe-nv-tools \
      caffe-nv \
      python-caffe-nv

##################
# Install Caffe2 #
##################
# Required deps (note, python2 support only at present)
apt-get install -y --no-install-recommends \
      build-essential \
      cmake \
      git \
      libgoogle-glog-dev \
      libprotobuf-dev \
      protobuf-compiler

pip install protobuf

# Optional deps
apt-get install -y --no-install-recommends \
      libgtest-dev \
      libiomp-dev \
      libleveldb-dev \
      liblmdb-dev \
      libopencv-dev \
      libopenmpi-dev \
      libsnappy-dev \

git clone --recursive https://github.com/caffe2/caffe2.git && cd caffe2
make && cd build && make install
cd ../../
rm -R caffe2
python -c 'from caffe2.python import core' 2>/dev/null && echo "Success" || echo "Failure"

######################
# Install Tensorflow #
######################
pip2 install tensorflow-gpu
pip3 install tensorflow-gpu

##################
# Install Theano #
##################
pip2 install Theano
pip3 install Theano

#################
# Install Keras #
#################
pip2 install keras
pip3 install keras

######################
# Clean up apt cache #
######################
rm -rf /var/lib/apt/lists/*

###############################
# Create MASSIVE mount points #
###############################
mkdir -p /projects
mkdir -p /scratch
mkdir -p /usr/local/openmpi

######################################
# Add startup script and environment #
######################################

cat << 'EOF' >> /.singularity.d/env/90-environment.sh
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/lib/:/usr/local/cuda/lib64:$TMPDIR"
export PYTHONPATH=/usr/local
EOF

cat << 'EOF' > /.singularity.d/runscript
#!/bin/bash

TMPDIR=$(mktemp -d)

function finish {
  rm -rf "$TMPDIR"
}
trap finish EXIT

cd /
jupyter notebook --ip=0.0.0.0
EOF
